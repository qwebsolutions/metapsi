using Metapsi.Hyperapp;
using Metapsi.Syntax;
using System;
using System.Collections.Generic;
using Metapsi.Ui;
using Metapsi.Html;
using Metapsi.Dom;

namespace Metapsi.Ionic;


public partial class IonAccordion : IonComponent
{
    public IonAccordion() : base("ion-accordion") { }
    /// <summary>
    ///
    /// </summary>
    public static class Slot
    {
        /// <summary>
        /// <para> Content is placed below the header and is shown or hidden based on expanded state. </para>
        /// </summary>
        public const string Content = "content";
        /// <summary>
        /// <para> Content is placed at the top and is used to expand or collapse the accordion item. </para>
        /// </summary>
        public const string Header = "header";
    }
}

public static partial class IonAccordionControl
{
    /// <summary>
    ///
    /// </summary>
    public static IHtmlNode IonAccordion(this HtmlBuilder b, Action<AttributesBuilder<IonAccordion>> buildAttributes, params IHtmlNode[] children)
    {
        return b.Tag("ion-accordion", buildAttributes, children);
    }
    /// <summary>
    ///
    /// </summary>
    public static IHtmlNode IonAccordion(this HtmlBuilder b, params IHtmlNode[] children)
    {
        return b.Tag("ion-accordion", new Dictionary<string, string>(), children);
    }
    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with. </para>
    /// </summary>
    public static void SetDisabled(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("disabled", "");
    }

    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with. </para>
    /// </summary>
    public static void SetDisabled(this AttributesBuilder<IonAccordion> b,bool disabled)
    {
        if (disabled) b.SetAttribute("disabled", "");
    }

    /// <summary>
    /// <para> The mode determines which platform styles to use. </para>
    /// </summary>
    public static void SetMode(this AttributesBuilder<IonAccordion> b,string mode)
    {
        b.SetAttribute("mode", mode);
    }

    /// <summary>
    /// <para> The mode determines which platform styles to use. </para>
    /// </summary>
    public static void SetModeIos(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("mode", "ios");
    }

    /// <summary>
    /// <para> The mode determines which platform styles to use. </para>
    /// </summary>
    public static void SetModeMd(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("mode", "md");
    }

    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with, but does not alter the opacity. </para>
    /// </summary>
    public static void SetReadonly(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("readonly", "");
    }

    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with, but does not alter the opacity. </para>
    /// </summary>
    public static void SetReadonly(this AttributesBuilder<IonAccordion> b,bool @readonly)
    {
        if (@readonly) b.SetAttribute("readonly", "");
    }

    /// <summary>
    /// <para> The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed. </para>
    /// </summary>
    public static void SetToggleIcon(this AttributesBuilder<IonAccordion> b,string toggleIcon)
    {
        b.SetAttribute("toggle-icon", toggleIcon);
    }

    /// <summary>
    /// <para> The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`. </para>
    /// </summary>
    public static void SetToggleIconSlot(this AttributesBuilder<IonAccordion> b,string toggleIconSlot)
    {
        b.SetAttribute("toggle-icon-slot", toggleIconSlot);
    }

    /// <summary>
    /// <para> The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`. </para>
    /// </summary>
    public static void SetToggleIconSlotEnd(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("toggle-icon-slot", "end");
    }

    /// <summary>
    /// <para> The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`. </para>
    /// </summary>
    public static void SetToggleIconSlotStart(this AttributesBuilder<IonAccordion> b)
    {
        b.SetAttribute("toggle-icon-slot", "start");
    }

    /// <summary>
    /// <para> The value of the accordion. Defaults to an autogenerated value. </para>
    /// </summary>
    public static void SetValue(this AttributesBuilder<IonAccordion> b,string value)
    {
        b.SetAttribute("value", value);
    }

    /// <summary>
    ///
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, Action<PropsBuilder<IonAccordion>> buildProps, Var<List<IVNode>> children)
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }
    /// <summary>
    ///
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, Action<PropsBuilder<IonAccordion>> buildProps, params Var<IVNode>[] children)
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }
    /// <summary>
    ///
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, Var<List<IVNode>> children)
    {
        return b.IonicNode("ion-accordion", children);
    }
    /// <summary>
    ///
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, params Var<IVNode>[] children)
    {
        return b.IonicNode("ion-accordion", children);
    }
    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with. </para>
    /// </summary>
    public static void SetDisabled<T>(this PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("disabled"), b.Const(true));
    }


    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with. </para>
    /// </summary>
    public static void SetDisabled<T>(this PropsBuilder<T> b, Var<bool> disabled) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("disabled"), disabled);
    }

    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with. </para>
    /// </summary>
    public static void SetDisabled<T>(this PropsBuilder<T> b, bool disabled) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("disabled"), b.Const(disabled));
    }


    /// <summary>
    /// <para> The mode determines which platform styles to use. </para>
    /// </summary>
    public static void SetModeIos<T>(this PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("mode"), b.Const("ios"));
    }


    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with, but does not alter the opacity. </para>
    /// </summary>
    public static void SetReadonly<T>(this PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("readonly"), b.Const(true));
    }


    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with, but does not alter the opacity. </para>
    /// </summary>
    public static void SetReadonly<T>(this PropsBuilder<T> b, Var<bool> @readonly) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("readonly"), @readonly);
    }

    /// <summary>
    /// <para> If `true`, the accordion cannot be interacted with, but does not alter the opacity. </para>
    /// </summary>
    public static void SetReadonly<T>(this PropsBuilder<T> b, bool @readonly) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<bool>("readonly"), b.Const(@readonly));
    }


    /// <summary>
    /// <para> The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed. </para>
    /// </summary>
    public static void SetToggleIcon<T>(this PropsBuilder<T> b, Var<string> toggleIcon) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("toggleIcon"), toggleIcon);
    }

    /// <summary>
    /// <para> The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed. </para>
    /// </summary>
    public static void SetToggleIcon<T>(this PropsBuilder<T> b, string toggleIcon) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("toggleIcon"), b.Const(toggleIcon));
    }


    /// <summary>
    /// <para> The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`. </para>
    /// </summary>
    public static void SetToggleIconSlotEnd<T>(this PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("toggleIconSlot"), b.Const("end"));
    }


    /// <summary>
    /// <para> The value of the accordion. Defaults to an autogenerated value. </para>
    /// </summary>
    public static void SetValue<T>(this PropsBuilder<T> b, Var<string> value) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("value"), value);
    }

    /// <summary>
    /// <para> The value of the accordion. Defaults to an autogenerated value. </para>
    /// </summary>
    public static void SetValue<T>(this PropsBuilder<T> b, string value) where T: IonAccordion
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("value"), b.Const(value));
    }


}

