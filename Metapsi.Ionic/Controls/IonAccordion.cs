using Metapsi.Hyperapp;
using Metapsi.Syntax;
using System;
using System.Collections.Generic;
using Metapsi.Ui;

namespace Metapsi.Ionic;


public partial class IonAccordion
{
    public static class Slot
    {
        /// <summary> 
        /// Content is placed below the header and is shown or hidden based on expanded state.
        /// </summary>
        public const string Content = "content";
        /// <summary> 
        /// Content is placed at the top and is used to expand or collapse the accordion item.
        /// </summary>
        public const string Header = "header";
    }
}

public static partial class IonAccordionControl
{
    /// <summary>
    /// 
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, Action<PropsBuilder<IonAccordion>> buildProps, Var<List<IVNode>> children)
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }
    /// <summary>
    /// 
    /// </summary>
    public static Var<IVNode> IonAccordion(this LayoutBuilder b, Action<PropsBuilder<IonAccordion>> buildProps, params Var<IVNode>[] children)
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }
    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.Bool("disabled"), b.Const(true));
    }

    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeIos(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.String("mode"), b.Const("ios"));
    }
    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeMd(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.String("mode"), b.Const("md"));
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.Bool("readonly"), b.Const(true));
    }

    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    public static void SetToggleIcon(this PropsBuilder<IonAccordion> b, Var<string> value)
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("toggleIcon"), value);
    }
    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    public static void SetToggleIcon(this PropsBuilder<IonAccordion> b, string value)
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("toggleIcon"), b.Const(value));
    }

    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotEnd(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.String("toggleIconSlot"), b.Const("end"));
    }
    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotStart(this PropsBuilder<IonAccordion> b)
    {
        b.SetDynamic(b.Props, DynamicProperty.String("toggleIconSlot"), b.Const("start"));
    }

    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.
    /// </summary>
    public static void SetValue(this PropsBuilder<IonAccordion> b, Var<string> value)
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("value"), value);
    }
    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.
    /// </summary>
    public static void SetValue(this PropsBuilder<IonAccordion> b, string value)
    {
        b.SetDynamic(b.Props, new DynamicProperty<string>("value"), b.Const(value));
    }

}

