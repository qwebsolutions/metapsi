using Metapsi.Html;
using Metapsi.Syntax;
using Metapsi.Hyperapp;

namespace Metapsi.Ionic;

/// <summary>
/// 
/// </summary>
public partial class IonAccordion
{
    /// <summary>
    /// 
    /// </summary>
    public static class Slot
    {
        /// <summary>
        /// Content is placed below the header and is shown or hidden based on expanded state.
        /// </summary>
        public const string Content = "content";
        /// <summary>
        /// Content is placed at the top and is used to expand or collapse the accordion item.
        /// </summary>
        public const string Header = "header";
    }
    /// <summary>
    /// 
    /// </summary>
    public static class Method
    {
    }
}
/// <summary>
/// Setter extensions of IonAccordion
/// </summary>
public static partial class IonAccordionControl
{
    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Html.IHtmlNode IonAccordion(this Metapsi.Html.HtmlBuilder b, System.Action<Metapsi.Html.AttributesBuilder<IonAccordion>> buildAttributes, params Metapsi.Html.IHtmlNode[] children) 
    {
        return b.IonicTag("ion-accordion", buildAttributes, children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Html.IHtmlNode IonAccordion(this Metapsi.Html.HtmlBuilder b, params Metapsi.Html.IHtmlNode[] children) 
    {
        return b.IonicTag("ion-accordion", new System.Collections.Generic.Dictionary<string, string>(), children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Html.IHtmlNode IonAccordion(this Metapsi.Html.HtmlBuilder b, System.Action<Metapsi.Html.AttributesBuilder<IonAccordion>> buildAttributes, System.Collections.Generic.List<Metapsi.Html.IHtmlNode> children) 
    {
        return b.IonicTag("ion-accordion", buildAttributes, children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Html.IHtmlNode IonAccordion(this Metapsi.Html.HtmlBuilder b, System.Collections.Generic.List<Metapsi.Html.IHtmlNode> children) 
    {
        return b.IonicTag("ion-accordion", new System.Collections.Generic.Dictionary<string, string>(), children);
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled(this Metapsi.Html.AttributesBuilder<IonAccordion> b, bool disabled) 
    {
        if (disabled) b.SetAttribute("disabled", "");
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("disabled", "");
    }

    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeIos(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("mode", "ios");
    }

    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeMd(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("mode", "md");
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly(this Metapsi.Html.AttributesBuilder<IonAccordion> b, bool @readonly) 
    {
        if (@readonly) b.SetAttribute("readonly", "");
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("readonly", "");
    }

    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    public static void SetToggleIcon(this Metapsi.Html.AttributesBuilder<IonAccordion> b, string toggleIcon) 
    {
        b.SetAttribute("toggleIcon", toggleIcon);
    }

    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotEnd(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("toggleIconSlot", "end");
    }

    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotStart(this Metapsi.Html.AttributesBuilder<IonAccordion> b) 
    {
        b.SetAttribute("toggleIconSlot", "start");
    }

    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.
    /// </summary>
    public static void SetValue(this Metapsi.Html.AttributesBuilder<IonAccordion> b, string value) 
    {
        b.SetAttribute("value", value);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode> IonAccordion(this Metapsi.Hyperapp.LayoutBuilder b, System.Action<Metapsi.Syntax.PropsBuilder<IonAccordion>> buildProps, params Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode>[] children) 
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode> IonAccordion(this Metapsi.Hyperapp.LayoutBuilder b, params Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode>[] children) 
    {
        return b.IonicNode("ion-accordion", children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode> IonAccordion(this Metapsi.Hyperapp.LayoutBuilder b, System.Action<Metapsi.Syntax.PropsBuilder<IonAccordion>> buildProps, Metapsi.Syntax.Var<System.Collections.Generic.List<Metapsi.Hyperapp.IVNode>> children) 
    {
        return b.IonicNode("ion-accordion", buildProps, children);
    }

    /// <summary>
    /// 
    /// </summary>
    public static Metapsi.Syntax.Var<Metapsi.Hyperapp.IVNode> IonAccordion(this Metapsi.Hyperapp.LayoutBuilder b, Metapsi.Syntax.Var<System.Collections.Generic.List<Metapsi.Hyperapp.IVNode>> children) 
    {
        return b.IonicNode("ion-accordion", children);
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetDisabled(b.Const(true));
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled<T>(this Metapsi.Syntax.PropsBuilder<T> b, Metapsi.Syntax.Var<bool> disabled) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("disabled"), disabled);
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with.
    /// </summary>
    public static void SetDisabled<T>(this Metapsi.Syntax.PropsBuilder<T> b, bool disabled) where T: IonAccordion
    {
        b.SetDisabled(b.Const(disabled));
    }

    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeIos<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("mode"), b.Const("ios"));
    }

    /// <summary>
    /// The mode determines which platform styles to use.
    /// </summary>
    public static void SetModeMd<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("mode"), b.Const("md"));
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetReadonly(b.Const(true));
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly<T>(this Metapsi.Syntax.PropsBuilder<T> b, Metapsi.Syntax.Var<bool> @readonly) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("readonly"), @readonly);
    }

    /// <summary>
    /// If `true`, the accordion cannot be interacted with, but does not alter the opacity.
    /// </summary>
    public static void SetReadonly<T>(this Metapsi.Syntax.PropsBuilder<T> b, bool @readonly) where T: IonAccordion
    {
        b.SetReadonly(b.Const(@readonly));
    }

    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    public static void SetToggleIcon<T>(this Metapsi.Syntax.PropsBuilder<T> b, Metapsi.Syntax.Var<string> toggleIcon) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("toggleIcon"), toggleIcon);
    }

    /// <summary>
    /// The toggle icon to use. This icon will be rotated when the accordion is expanded or collapsed.
    /// </summary>
    public static void SetToggleIcon<T>(this Metapsi.Syntax.PropsBuilder<T> b, string toggleIcon) where T: IonAccordion
    {
        b.SetToggleIcon(b.Const(toggleIcon));
    }

    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotEnd<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("toggleIconSlot"), b.Const("end"));
    }

    /// <summary>
    /// The slot inside of `ion-item` to place the toggle icon. Defaults to `"end"`.
    /// </summary>
    public static void SetToggleIconSlotStart<T>(this Metapsi.Syntax.PropsBuilder<T> b) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("toggleIconSlot"), b.Const("start"));
    }

    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.
    /// </summary>
    public static void SetValue<T>(this Metapsi.Syntax.PropsBuilder<T> b, Metapsi.Syntax.Var<string> value) where T: IonAccordion
    {
        b.SetProperty(b.Props, b.Const("value"), value);
    }

    /// <summary>
    /// The value of the accordion. Defaults to an autogenerated value.
    /// </summary>
    public static void SetValue<T>(this Metapsi.Syntax.PropsBuilder<T> b, string value) where T: IonAccordion
    {
        b.SetValue(b.Const(value));
    }

}